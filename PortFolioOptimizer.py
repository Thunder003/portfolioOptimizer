# -*- coding: utf-8 -*-
"""Untitled3.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1nKMcp_4unqZXJ7mRPUHghnyag72EXImo
"""

from pandas_datareader import data as web
import pandas as pd
import numpy as np
from datetime import datetime
import matplotlib.pyplot as plt
plt.style.use('fivethirtyeight')

asset=['RELIANCE.NS', 'TCS.NS', 'HDFCBANK.NS', 'ITC.NS', 'HINDUNILVR.NS']

weight=np.array([0.2,0.2,0.2,0.2,0.2])
weight.shape

stockstartdate='2013-01-01'

today=datetime.today().strftime('%Y-%m-%d')
today

df=pd.DataFrame()

for stocks in asset:
  df[stocks]=web.DataReader(stocks,data_source='yahoo', start=stockstartdate, end=today)['Adj Close']

df

title='Portfolio Adj. Close Price History'

my_stocks=df
for c in my_stocks.columns.values:
  plt.plot(my_stocks[c], label=c)

plt.title(title)
plt.xlabel('Date', fontsize=18)
plt.ylabel('Adj. Price Indian Rupee(Rs.)', fontsize=18)
plt.legend(my_stocks.columns.values, loc='upper left')
plt.show()

returns=df.pct_change()
returns

#Annuliazed covariance matrix
cov=returns.cov()*252 
cov

#Portfolio variance
port_variance=np.dot(weight.T,np.dot(cov,weight))
port_variance

#Volatility
port_volatility=np.sqrt(port_variance)
port_volatility

#Annual Portfolio Return
portfoliosimplereturn=np.sum(returns.mean()*weight)*252
portfoliosimplereturn

percent_var=str(round(port_variance,2)*100)+'%'
percent_vol=str(round(port_volatility,2)*100)+'%'
percent_ret=str(round(portfoliosimplereturn,2)*100)+'%'

print('Annual Return: '+ percent_ret)
print('Annual Volatility(Risk): '+ percent_vol)
print('Annual Variance: '+ percent_var)

pip install PyPortfolioOpt

from pypfopt.efficient_frontier import EfficientFrontier
from pypfopt import risk_models
from pypfopt import expected_returns

mu= expected_returns.mean_historical_return(df)
S=risk_models.sample_cov(df)

ef=EfficientFrontier(mu,S)
weights=ef.max_sharpe()
cleaned_weights=ef.clean_weights()
print(cleaned_weights)
ef.portfolio_performance(verbose=True)

from pypfopt.discrete_allocation import DiscreteAllocation, get_latest_prices

latest_prices=get_latest_prices(df)
weights=cleaned_weights
da=DiscreteAllocation(weights,latest_prices, total_portfolio_value=13000)

allocation,leftover=da.lp_portfolio()
print('Discrete Allocarion :', allocation)
print('Fund remaining: Rs {:.2f}'.format(leftover))

